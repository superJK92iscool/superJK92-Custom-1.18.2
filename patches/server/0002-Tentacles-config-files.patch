From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Sat, 25 Dec 2021 22:30:05 -0500
Subject: [PATCH] Tentacles config files


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 20f016e24b679af2651dc84819b1c62d2937b77b..76267a2a319b4fdf17784d9918d5f9addf8437f4 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -240,6 +240,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Tentacles start
+        try {
+            org.purpurmc.tentacles.TentaclesConfig.init((java.io.File) options.valueOf("tentacles-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        org.purpurmc.tentacles.TentaclesConfig.registerCommands();
+        // Tentacles end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 40e01ed99a129a6a14f9c5cc29f046bd23d198cb..0216562a6bfacb006cf7a0482bbb6588a6645a9f 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -166,6 +166,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
 
+    public final org.purpurmc.tentacles.TentaclesWorldConfig tentaclesConfig; // Purpur
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -319,6 +321,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.tentaclesConfig = new org.purpurmc.tentacles.TentaclesWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Tentacles
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6dec98c0442bf3e167bff2e1b21e4c71653c93c3..b5f83a3907802ce201b2b5de4a5ea585d9aca4e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -957,6 +957,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        org.purpurmc.tentacles.TentaclesConfig.init((File) console.options.valueOf("tentacles-settings")); // Tentacles
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -974,6 +975,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.purpurConfig.init(); // Purpur
+            world.tentaclesConfig.init(); // Purpur
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2748,6 +2750,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Tentacles
+        @Override
+        public YamlConfiguration getTentaclesConfig() {
+            return org.purpurmc.tentacles.TentaclesConfig.config;
+        }
+        // Tentacles end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 639dc3bb56cc90b84da08dc93cea89c658ed6dc8..f6a1ee7db5b40d5b6775411c5381f67724f931f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -161,6 +161,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Tentacles Start
+                acceptsAll(asList("tentacles", "tentacles-settings"), "File for tentacles settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("tentacles.yml"))
+                        .describedAs("Yml file");
+                // Tentacles end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/purpurmc/tentacles/TentaclesConfig.java b/src/main/java/org/purpurmc/tentacles/TentaclesConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1c8d72efc4afbf207f3595d17a0e5c3f73700b8c
--- /dev/null
+++ b/src/main/java/org/purpurmc/tentacles/TentaclesConfig.java
@@ -0,0 +1,148 @@
+package org.purpurmc.tentacles;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.purpurmc.tentacles.command.TentaclesCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class TentaclesConfig {
+    private static final String HEADER = "This is the main configuration file for Tentacles.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.\n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load tentacles.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("tentacles", new TentaclesCommand("tentacles"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(TentaclesConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Tentacles", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/org/purpurmc/tentacles/TentaclesWorldConfig.java b/src/main/java/org/purpurmc/tentacles/TentaclesWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..c093ec29f61d8d6d006b17126789788b95b18bc3
--- /dev/null
+++ b/src/main/java/org/purpurmc/tentacles/TentaclesWorldConfig.java
@@ -0,0 +1,78 @@
+package org.purpurmc.tentacles;
+
+import net.minecraft.server.level.ServerLevel;
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.function.Predicate;
+
+import static org.purpurmc.tentacles.TentaclesConfig.log;
+
+@SuppressWarnings("unused")
+public class TentaclesWorldConfig {
+
+    private final String worldName;
+
+    public TentaclesWorldConfig(String worldName) {
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        TentaclesConfig.readConfig(TentaclesWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, val);
+        TentaclesConfig.config.set("world-settings.default." + path, val);
+        if (TentaclesConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            TentaclesConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            TentaclesConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = TentaclesConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : TentaclesConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private String getString(String path, String def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getString("world-settings." + worldName + "." + path, TentaclesConfig.config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getBoolean("world-settings." + worldName + "." + path, TentaclesConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getDouble("world-settings." + worldName + "." + path, TentaclesConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getInt("world-settings." + worldName + "." + path, TentaclesConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getList("world-settings." + worldName + "." + path, TentaclesConfig.config.getList("world-settings.default." + path));
+    }
+
+    private Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = TentaclesConfig.getMap("world-settings.default." + path, def);
+        final Map<String, Object> value = TentaclesConfig.getMap("world-settings." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/purpurmc/tentacles/command/TentaclesCommand.java b/src/main/java/org/purpurmc/tentacles/command/TentaclesCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ec54a5972934ad75bb910d73ff187851fde834d8
--- /dev/null
+++ b/src/main/java/org/purpurmc/tentacles/command/TentaclesCommand.java
@@ -0,0 +1,66 @@
+package org.purpurmc.tentacles.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.purpurmc.tentacles.TentaclesConfig;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class TentaclesCommand extends Command {
+    public TentaclesCommand(String name) {
+        super(name);
+        this.description = "Tentacles related commands";
+        this.usageMessage = "/tentacles [reload | version]";
+        this.setPermission("bukkit.command.tentacles");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            TentaclesConfig.init((File) console.options.valueOf("tentacles-settings"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.tentaclesConfig.init();
+                level.resetBreedingCooldowns();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Tentacles config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
